{{- if .Values.backend.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "aviralworld.fullname" . }}-backend
  labels:
{{ include "aviralworld.labels" . | indent 4 }}
    app: backend
spec:
{{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
{{- end }}
  selector:
    matchLabels:
      {{- include "aviralworld.selectorLabels" . | nindent 6 }}
      app: backend
  template:
    metadata:
    {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        {{- include "aviralworld.selectorLabels" . | nindent 8 }}
        app: backend
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "aviralworld.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}-backend
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.backend.port }}
              protocol: TCP
            - name: admin
              containerPort: {{ .Values.backend.adminPort }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: admin
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            - name: BACKEND_BASE_URL
              value: "{{ .Values.backend.baseUrl }}"
            - name: BACKEND_RECORDINGS_PATH
              value: "{{ .Values.backend.apiPath }}"
            - name: BACKEND_PORT
              value: "{{ .Values.backend.port }}"
            - name: BACKEND_ADMIN_PORT
              value: "{{ .Values.backend.adminPort }}"
            - name: BACKEND_TOKENS_PER_RECORDING
              value: "{{ .Values.backend.tokensPerRecording }}"
            - name: BACKEND_S3_ACL
              value: "{{ .Values.backend.store.acl }}"
            - name: BACKEND_S3_CACHE_CONTROL
              value: "{{ .Values.backend.store.cacheControl }}"
            - name: BACKEND_DB_CONNECTION_STRING
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgres.secretRef }}
                  key: CONNECTION_STRING
            - name: S3_BUCKET_NAME
              value: "{{ .Values.s3.bucketName }}"
            - name: S3_REGION_NAME
              value: "{{ .Values.s3.regionName }}"
            - name: S3_ENDPOINT
              value: "{{ .Values.s3.endpoint }}"
            - name: S3_BASE_URL
              value: "{{ .Values.backend.store.baseUrl }}"
            - name: S3_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.s3.secretRef }}
                  key: ACCESS_KEY
            - name: S3_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.s3.secretRef }}
                  key: SECRET_ACCESS_KEY
            
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}